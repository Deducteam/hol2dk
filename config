#!/bin/sh

if test -z "$HOL2DK_DIR"
then
    echo "HOL2DK_DIR is not set"
    exit 1
fi

if test -z "$HOLLIGHT_DIR"
then
    echo "HOLLIGHT_DIR is not set"
    exit 1
fi

usage() {
    cat <<__EOF__
usage: `basename $0` $hollight_file.ml $root_path [coq_file_or_module] ... [$file.mk] [$erasing.lp]

arguments:
  $hollight_file.ml: path to an ml file relative to $HOLLIGHT_DIR
  $root_path: name of the generated library
  coq_file_or_module: coq modules that needs to be imported in generated files
  $file.mk: dependencies of vo files given in arguments
  $erasing.lp: mappings between lambdapi and coq

effect in the current directory:
- create a file CONFIG containing the command used to create links
- create a file BASE containing the base name of $hollight_file.ml
- create a file ROOT_PATH containing $root_path
- create a file lambdapi.pkg
- create a file _CoqProject
- create a file ERASING containing $erasing.lp
- create a file REQUIRING containing the list of Coq module names that need to be imported (in the same order as they are given in the command)
- create a file VOFILES containing the list of Coq module names corresponding to the Coq files given in arguments with file extension ".vo"
- add links to $file.mk, the Coq files given in argument and other files in $HOL2DK_DIR and $HOLLIGHT_DIR for translating and checking the proofs of $hollight_file.ml
__EOF__
}

error() {
    echo error: $1
    echo
    usage
    exit 1
}

parse_args() {
    if test $# -ne 0; then
        case $1 in
            *.lp)
                if test -z "$erasing"
                then
                    erasing=$1
                    shift
                    parse_args $*
                else
                    error 'too many lp files'
                fi;;
            *.ml)
                if test -z "$hollight_file"
                then
                    hollight_file=$1
                    shift
                    parse_args $*
                else
                    error 'too many ml files'
                fi;;
            *.mk)
                if test -z "$mk_file"
                then
                    mk_file=$1
                    shift
                    parse_args $*
                else
                    error 'too many make files'
                fi;;
            *.v)
                if test -z "$root_path"
                then
                    error 'the root_path must be given before Coq files'
                else
                    coq_files="$coq_files $1"
                    vo_files="$vo_files `basename $1`o"
                    requiring="$requiring $root_path.`basename $1 .v`"
                    shift
                    parse_args $*
                fi;;
            *)
                if test -z "$root_path"
                then
                    root_path=$1
                else
                    requiring="$requiring $1"
                fi
                shift
                parse_args $*;;
        esac
    fi
}

echo create CONFIG ...
echo '#!/bin/sh' > CONFIG
echo hol2dk config $* >> CONFIG
chmod a+x CONFIG

parse_args $*
if test -z "$root_path"
then
    error 'missing root_path'
fi

echo create BASE ...
echo `basename $hollight_file .ml` > BASE

echo create ROOT_PATH ...
echo $root_path > ROOT_PATH

echo create lambdapi.pkg ...
echo "package_name = $root_path" > lambdapi.pkg
echo "root_path = $root_path" >> lambdapi.pkg

echo create _CoqProject ...
echo "-R . $root_path ." > _CoqProject

echo create ERASING ...
echo ${erasing:-$HOL2DK_DIR/erasing.lp} > ERASING

echo create REQUIRING ...
echo $requiring > REQUIRING

echo create VOFILES ...
echo $vo_files > VOFILES

if test -z "$mk_file"
then
    touch deps.mk
else
    echo ln -f -s $mk_file deps.mk
    ln -f -s $mk_file deps.mk
fi

for f in $coq_files
do
    echo ln -f -s $f
    ln -f -s $f
done

for f in theory_hol.dk theory_hol.lp Makefile BIG_FILES
do
    echo ln -f -s $HOL2DK_DIR/$f
    ln -f -s $HOL2DK_DIR/$f
done

for ext in prf nbp sig thm pos use
do
    echo ln -f -s $HOLLIGHT_DIR/${hollight_file%.ml}.$ext
    ln -f -s $HOLLIGHT_DIR/${hollight_file%.ml}.$ext
done
